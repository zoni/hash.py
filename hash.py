#!/usr/bin/env python3

"""
A password hasher which generates hashes for /etc/shadow
"""

import argparse
import random
import sys
import crypt
from getpass import getpass

# Supported crypt() hash methods and the corresponding (glibc) ID's
HASH_METHODS = {m.name.lower(): m.ident for m in crypt.methods}


def hash(hashmethod, salt, password):
    """
    Return the hash (formatted for the Linux /etc/shadow file) for a given password

    :param hashmethod: The hash method to use (a key from HASH_METHODS)
    :param salt: The salt to use
    :param password: The password itself
    :return: The password hash
    """
    assert hashmethod is not None
    assert salt is not None
    assert password is not None
    assert hashmethod in HASH_METHODS

    if hashmethod == "crypt":
        assert len(salt) == 2
        return crypt.crypt(password, "{}".format(salt))

    return crypt.crypt(password, "${}${}$".format(HASH_METHODS[hashmethod], salt))


def generate_salt(length=8):
    """
    Generate a random salt for password hashing

    :return: A random salt of the requested length
    """
    # See `man crypt` for why this range was chosen
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890./"
    salt = [random.choice(chars) for i in range(0, length)]
    return "".join(salt)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Calculate password hashes for /etc/shadow"
    )
    parser.add_argument(
        '-a', '--hash-algorithm',
        help="select hash algorithm (md5, blowfish, sha256 or sha512)",
        default="sha512"
    )
    parser.add_argument(
        '-s',
        '--salt',
        help="supply salt to use (randomly generated by default)"
    )
    args = parser.parse_args()

    hash_algorithm = args.hash_algorithm.lower()
    if args.hash_algorithm not in HASH_METHODS.keys():
        sys.stderr.write(
            "Unsupported hash algorithm. Supported algorithms are:"
            "{}\n".format(", ".join(HASH_METHODS.keys()))
        )
        sys.exit(1)

    if args.salt is None:
        if hash_algorithm == "crypt":
            salt = generate_salt(2)
        else:
            salt = generate_salt(8)
    else:
        salt = args.salt
        if hash_algorithm == "crypt" and len(salt) > 2:
            sys.stderr.write("crypt only supports 2-character salts\n")
            sys.exit(1)

    password = getpass()
    password_hash = hash(
        hashmethod=hash_algorithm,
        salt=salt,
        password=password
    )
    print(password_hash)
